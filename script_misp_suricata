#!/usr/bin/env python3
"""
Script pour extraire toutes les règles Suricata/Snort disponibles dans MISP.
Ce script recherche tous les attributs de type suricata/snort et les enregistre
dans un fichier de règles pour Suricata, en incluant les types domain, ip, et payload.
"""

import os
import json
import argparse
import sys
import requests
import urllib3
from datetime import datetime

# Ignorer les avertissements SSL si verify_ssl est désactivé
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Liste étendue des types d'attributs à rechercher
SUPPORTED_TYPES = [
    'suricata', 'snort',  # Types originaux
    'domain', 'ip', 'ip-dst', 'ip-src',  # Types IP et domaine
    'hostname', 'md5',  # Types existants
    'payload',  # Nouveau type ajouté
    'http-method', 'uri', 'user-agent'  # Types supplémentaires potentiellement utiles
]

def parse_args():
    """Parse command line arguments"""
    parser = argparse.ArgumentParser(description="Extraire toutes les règles Suricata/Snort depuis MISP")
    parser.add_argument(
        "-c", "--config",
        default="misp_config.json",
        help="Fichier de configuration MISP (par défaut: misp_config.json)"
    )
    parser.add_argument(
        "-o", "--output",
        default="/etc/suricata/rules/misp_rules.rules",
        help="Fichier de sortie pour les règles (par défaut: /etc/suricata/rules/misp_rules.rules)"
    )
    parser.add_argument(
        "-e", "--event",
        type=int,
        help="ID d'un événement spécifique à extraire (optionnel)"
    )
    parser.add_argument(
        "-v", "--verbose",
        action="store_true",
        help="Mode verbeux"
    )
    return parser.parse_args()

def load_config(config_file):
    """Load configuration from file"""
    try:
        with open(config_file, "r") as f:
            config = json.load(f)
        
        # S'assurer que l'URL ne se termine pas par un slash
        if config.get('misp_url', '').endswith('/'):
            config['misp_url'] = config['misp_url'].rstrip('/')
            
        return config
    except Exception as e:
        print(f"Erreur lors du chargement de la configuration: {str(e)}")
        sys.exit(1)

def generate_suricata_rule(attr_type, value):
    """
    Générer une règle Suricata basée sur le type et la valeur de l'attribut
    
    Args:
        attr_type: Type de l'attribut MISP
        value: Valeur de l'attribut
    
    Returns:
        Règle Suricata formatée ou None si non applicable
    """
    value = value.strip()
    
    # Règles pour différents types d'attributs
    if attr_type in ['domain', 'hostname']:
        # Exemple de règle pour domaine/hostname
        return f'alert dns any any -> any any (msg:"Match domain {value}"; dns_query; content:"{value}"; nocase; sid:{hash(value)%100000};)'
    
    elif attr_type in ['ip', 'ip-dst', 'ip-src']:
        # Exemple de règle pour adresses IP
        return f'alert ip any any -> {value} any (msg:"Match IP {value}"; sid:{hash(value)%100000};)'
    
    elif attr_type == 'payload':
        # Exemple de règle pour payload
        return f'alert tcp any any -> any any (msg:"Match Payload {value[:20]}..."; content:"{value}"; sid:{hash(value)%100000};)'
    
    elif attr_type == 'md5':
        # Règle pour hash MD5 
        return f'alert file any any -> any any (msg:"Match MD5 Hash {value}"; filemd5:{value}; sid:{hash(value)%100000};)'
    
    # Si aucune règle n'est générée
    return None

def extract_rules_from_event(misp_url, misp_key, event_id, verify_ssl=False, verbose=False):
    """
    Extraire les règles Suricata/Snort d'un événement spécifique
    
    Args:
        misp_url: URL de l'instance MISP
        misp_key: Clé API MISP
        event_id: ID de l'événement
        verify_ssl: Vérifier le certificat SSL
        verbose: Mode verbeux
    
    Returns:
        Liste des règles trouvées
    """
    # Headers pour la requête API
    headers = {'Authorization': misp_key, 'Accept': 'application/json'}
    
    print(f"Extraction des règles de l'événement {event_id}...")
    
    url = f"{misp_url}/events/{event_id}"
    
    try:
        response = requests.get(url, headers=headers, verify=verify_ssl, timeout=15)
        
        if response.status_code == 200:
            event_data = response.json()
            
            # Extraire les attributs
            suricata_rules = []
            
            # Attributs directs
            for attr in event_data.get('Event', {}).get('Attribute', []):
                if attr.get('type') in SUPPORTED_TYPES and attr.get('to_ids'):
                    rule = generate_suricata_rule(attr.get('type'), attr.get('value'))
                    if rule:
                        if verbose:
                            print(f"Attribut trouvé: ID {attr.get('id')} - Type {attr.get('type')}")
                        suricata_rules.append(rule)
            
            # Attributs dans les objets
            for obj in event_data.get('Event', {}).get('Object', []):
                for attr in obj.get('Attribute', []):
                    if attr.get('type') in SUPPORTED_TYPES and attr.get('to_ids'):
                        rule = generate_suricata_rule(attr.get('type'), attr.get('value'))
                        if rule:
                            if verbose:
                                print(f"Attribut trouvé dans objet: ID {attr.get('id')} - Type {attr.get('type')}")
                            suricata_rules.append(rule)
            
            if suricata_rules:
                print(f"Trouvé {len(suricata_rules)} règles Suricata dans l'événement")
                return suricata_rules
            else:
                print("Aucun attribut valide trouvé dans l'événement")
        else:
            print(f"Échec de récupération de l'événement: HTTP {response.status_code}")
        
    except Exception as e:
        print(f"Erreur lors de la recherche des attributs: {str(e)}")
    
    return []

def search_all_rules(misp_url, misp_key, verify_ssl=False, verbose=False):
    """
    Rechercher toutes les règles Suricata/Snort disponibles dans MISP
    
    Args:
        misp_url: URL de l'instance MISP
        misp_key: Clé API MISP
        verify_ssl: Vérifier le certificat SSL
        verbose: Mode verbeux
    
    Returns:
        Liste des règles trouvées
    """
    print("Recherche de tous les attributs pour les règles Suricata...")
    
    # Headers pour la requête API
    headers = {
        'Authorization': misp_key, 
        'Accept': 'application/json',
        'Content-Type': 'application/json'
    }
    
    url = f"{misp_url}/attributes/restSearch"
    
    try:
        # Requête pour rechercher tous les attributs pertinents
        response = requests.post(
            url,
            headers=headers,
            json={
                "returnFormat": "json",
                "type": SUPPORTED_TYPES,
                "to_ids": 1,
                "limit": 10000  # Limite élevée pour obtenir tous les attributs
            },
            verify=verify_ssl,
            timeout=30
        )
        
        if response.status_code == 200:
            data = response.json()
            attributes = data.get('response', {}).get('Attribute', [])
            
            if not attributes:
                print("Aucun attribut trouvé")
                return []
            
            print(f"Trouvé {len(attributes)} attributs")
            
            # Générer des règles Suricata
            rules = []
            for attr in attributes:
                if 'value' in attr and attr.get('value', '').strip():
                    rule = generate_suricata_rule(attr.get('type'), attr.get('value'))
                    if rule:
                        if verbose:
                            print(f"Attribut traité: Événement {attr.get('event_id')} - Type {attr.get('type')}")
                        rules.append(rule)
            
            print(f"Extrait {len(rules)} règles Suricata")
            return rules
        else:
            print(f"Échec de la recherche: HTTP {response.status_code}")
            if verbose:
                print(f"Détail: {response.text[:500]}")
            
    except Exception as e:
        print(f"Erreur lors de la recherche des attributs: {str(e)}")
    
    return []

def write_rules_to_file(rules, output_file, event_id=None):
    """
    Écrire les règles dans un fichier
    
    Args:
        rules: Liste des règles à écrire
        output_file: Fichier de sortie
        event_id: ID de l'événement (optionnel)
    
    Returns:
        True si l'écriture a réussi, False sinon
    """
    if not rules:
        print("Aucune règle à écrire")
        return False
    
    # Supprimer les doublons tout en préservant l'ordre
    unique_rules = []
    seen = set()
    for rule in rules:
        rule_stripped = rule.strip()
        if rule_stripped and rule_stripped not in seen:
            seen.add(rule_stripped)
            unique_rules.append(rule_stripped)
    
    print(f"{len(unique_rules)} règles uniques après dédoublonnage")
    
    try:
        # Créer le répertoire si nécessaire
        os.makedirs(os.path.dirname(output_file), exist_ok=True)
        
        # Écrire les règles dans le fichier
        with open(output_file, "w") as f:
            # En-tête du fichier
            header = f"# MISP Suricata Rules\n"
            header += f"# Générées le {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            
            if event_id:
                header += f"# Événement ID: {event_id}\n"
            else:
                header += f"# Toutes les règles disponibles\n"
                
            header += f"# {len(unique_rules)} règles au total\n\n"
            
            f.write(header)
            
            # Écrire chaque règle
            for rule in unique_rules:
                f.write(rule + "\n")
        
        print(f"Règles écrites avec succès dans {output_file}")
        return True
        
    except Exception as e:
        print(f"Erreur lors de l'écriture dans le fichier: {str(e)}")
        return False

def main():
    """Fonction principale"""
    args = parse_args()
    config = load_config(args.config)
    
    misp_url = config.get('misp_url')
    misp_key = config.get('misp_key')
    verify_ssl = config.get('verify_ssl', False)
    
    print(f"Connexion à MISP: {misp_url}")
    
    # Extraction des règles
    if args.event:
        # Extraire les règles d'un événement spécifique
        rules = extract_rules_from_event(
            misp_url, 
            misp_key, 
            args.event, 
            verify_ssl=verify_ssl,
            verbose=args.verbose
        )
    else:
        # Extraire toutes les règles disponibles
        rules = search_all_rules(
            misp_url, 
            misp_key, 
            verify_ssl=verify_ssl,
            verbose=args.verbose
        )
    
    # Écrire les règles dans le fichier
    success = write_rules_to_file(rules, args.output, args.event)
    
    if success:
        print("Opération terminée avec succès")
        return 0
    else:
        print("Échec de l'opération")
        return 1

if __name__ == "__main__":
    sys.exit(main())
